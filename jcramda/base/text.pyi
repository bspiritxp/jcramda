import html
import re
from typing import Any, AnyStr, Iterable, Callable, Optional, Mapping, Tuple, TypeVar, overload

_RE = TypeVar('_RE')


def replace(old_str: AnyStr, new_str: AnyStr, s: AnyStr,
            _count: int = ...) -> str: ...
def sformat(tmpl: str, s: AnyStr, *args, **kwargs) -> str: ...
def strip(s: str, chars: AnyStr =...) -> str: ...
def lstrip(s: str, chars: AnyStr =...) -> str: ...
def rstrip(s: str, chars: AnyStr =...) -> str: ...
def strcount(rs: str, s: str, start: Optional[int] =..., end: Optional[int] =...) -> int: ...
def encode(s: AnyStr, errors: str=..., encoding: str=...) -> bytes: ...
def decode(bs: AnyStr) -> str: ...
def expandtabs(tab_size: int, s: str) -> str: ...
def find(rs: str, s: str, start: Optional[int] =..., end: Optional[int] =...) -> int: ...
def rfind(rs: str, s: str, start: Any=..., end: Any=...) -> Any: ...
@overload
def join(sep: str, seqs: Iterable) -> str: ...
@overload
def join(sep: str) -> Callable[[Iterable], str]: ...
def ljust(width: Any, s: str, fillchar: Any=...) -> Any: ...
def rjust(width: Any, s: str, fillchar: Any=...) -> Any: ...
def translate(opts: dict, s: str) -> Any: ...
def rindex(sub: Any, s: str, start: Any=..., end: Any=...) -> Any: ...
def split(sep: Any, s: str, limit: Any=...) -> Any: ...
def rsplit(sep: Any, s: str, limit: Any=...) -> Any: ...
def center(width: int, s: str, fill_char: str = ...) -> str: ...
def format_map(mapper: Mapping, s: str) -> str: ...
def partition(sep: str, s: str) -> Tuple[str, str, str]: ...
def rpartition(sep: str, s: str) -> Tuple[str, str, str]: ...
def zfill(length: int, s: str) -> str: ...
def first_lower(s: str) -> str: ...
def hex_token(size: int) -> str: ...
def url_safe_token(size: int) -> str: ...
def hex_uuid() -> str: ...
def camelcase(s: AnyStr) -> str: ...
def camelcase_to(sep: str, s: AnyStr, trans_f: Callable =...) -> str: ...
def rand_txt(length: int, char_set: str = ...) -> str: ...
def repeat_txt(n: int, s: str) -> str: ...
def mask(start: int, stop: int, raw: str, char: str = ...) -> str: ...
def mask_except(_head: int, _tail: int, s: str, char: str = ...) -> str: ...
def hexdigest(algorithm: str, raw: AnyStr, length: int = ...) -> str: ...
def b64_encode(s: AnyStr) -> str: ...
def b64_urlsafe_encode(s: AnyStr) -> str: ...
def b64_decode(s: AnyStr) -> str: ...
def b64_urlsafe_decode(s: AnyStr) -> str: ...
def search(pattern: str, s: str, flags: int = ...) -> _RE: ...
def match(pattern: str, s: str, flags: int = ...) -> _RE: ...
def fullmatch(pattern: str, s: str, flags: int = ...) -> _RE: ...
def resub(pattern: str, repl: str, s: str = ..., flags: int = ...) -> _RE: ...
def resubn(pattern: str, repl: str, s: str = ..., count: int = ..., flags: int = ...) -> _RE: ...
def finditer(pattern: str, s: str = ..., flags: int = ...) -> _RE: ...
def findall(pattern: str, s: str = ..., flags: int = ...) -> _RE: ...

