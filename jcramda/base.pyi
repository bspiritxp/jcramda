from enum import IntEnum
from typing import (Any, Sized, Callable, Iterable, Optional, TypeVar, Union)
from jcramda.core import CurriedF


"""
Comparison
"""

def ilen_lt(n: int, sized: Sized = ...) -> CurriedF[Sized, bool]: ...
def ilen_le(n: int, sized: Sized = ...) -> CurriedF[Sized, bool]: ...
def ilen_eq(n: int, sized: Sized = ...) -> CurriedF[Sized, bool]: ...
def ilen_gt(n: int, sized: Sized = ...) -> CurriedF[Sized, bool]: ...
def ilen_ge(n: int, sized: Sized = ...) -> CurriedF[Sized, bool]: ...
def len_lt(n: int, sized: Sized = ...) -> CurriedF[Sized, bool]: ...
def len_le(n: int, sized: Sized = ...) -> CurriedF[Sized, bool]: ...
def len_eq(n: int, sized: Sized = ...) -> CurriedF[Sized, bool]: ...
def len_gt(n: int, sized: Sized = ...) -> CurriedF[Sized, bool]: ...
def len_ge(n: int, sized: Sized = ...) -> CurriedF[Sized, bool]: ...
def is_zero(n: int) -> bool: ...

def is_nan(x: Any) -> bool: ...
def attr_eq(attr_name: str, value: Any, obj: Any = ...) -> CurriedF: ...

is_a_dict: Callable[[Any], bool]
is_a_mapper: Callable[[Any], bool]
is_a_tuple: Callable[[Any], bool]
is_a_list: Callable[[Any], bool]
is_a_str: Callable[[Any], bool]
is_a_func: Callable[[Any], bool]
is_a_int: Callable[[Any], bool]
is_iter: Callable[[Any], bool]
is_simple_iter: Callable[[Any], bool]
is_seq: Callable[[Any], bool]
nostr_seq: Callable[[Any], bool]


"""
Functions
"""
def applyto(*args, **kwargs) -> Callable[[Callable], Any]: ...
def juxt(*funcs: Callable) -> Callable[[Any], Any]: ...
def call_until(pred: Callable[[Any], bool], funcs: Iterable[Callable],
               *args: Any, **kwargs: Any) -> CurriedF: ...
def f_digest(f: Callable) -> str: ...
def converge(after_f: Callable, funcs: Iterable[Callable], value: Any = ...) -> CurriedF: ...

def repeat_call(funcs: Iterable[Callable], times: Optional[int] = None, *args) -> CurriedF: ...

def pair_call(funcs: Iterable[Callable], *args) -> CurriedF: ...
def use_with(after_f: Callable, funcs: Iterable[Callable] = ..., *args) -> CurriedF: ...


"""
Datetime
"""
import datetime as dt
AnyDateTime = TypeVar('AnyDateTime', dt.date, dt.datetime)
now: Callable[[], dt.datetime]
utcnow: Callable[[], dt.datetime]
today: Any

def locnow() -> dt.datetime: ...
def timestamp(d: dt.datetime=...) -> int: ...
def timestamp_ms(d: dt.datetime=...) -> int: ...
def localize(_tz: dt.tzinfo, t1: dt.datetime) -> AnyDateTime: ...
def fromtimestamp(tmp: int): ...
def to_datetime(raw: Union[str, int, float, AnyDateTime]): ...
def format_dt(p: str, d: AnyDateTime = ...) -> CurriedF[Any, AnyDateTime]: ...

def std_fmt_d(d: AnyDateTime) -> str: ...
def std_fmt_dt(d: AnyDateTime) -> str: ...

class FreqName(IntEnum):
    Yearly: int = ...
    Monthly: int = ...
    Weekly: int = ...
    Daily: int = ...
    Hourly: int = ...
    Minutely: int = ...
    Secondly: int = ...

def daterange(freq: Union[int, FreqName], start_date: AnyDateTime, **kwargs) -> Any: ...
